package servidor;

import javax.swing.DefaultListModel;

/**
 * Clase Main para el Servidor. Al ser ejecutada iniciará una instancia de la
 * clase Servidor para no bloquear la interfaz gráfica.
 *
 * Esta clase debe tener una única instancia ejecutándose.
 *
 * @author Ivan Martin
 */
public class MainServidor extends javax.swing.JFrame {

    private Servidor socketServidor;
    private static DefaultListModel<String> modeloListaClientes;

    /**
     * Creates new form MainServidor
     */
    public MainServidor() {
        initComponents();
        socketServidor = new Servidor();
        sPnlContendor.setViewportView(socketServidor);
        modeloListaClientes = new DefaultListModel<>();
        jListClientes.setModel(modeloListaClientes);
        socketServidor.start();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblLog = new javax.swing.JLabel();
        btnDesconectar = new javax.swing.JButton();
        sPnlContendor = new javax.swing.JScrollPane();
        sPnlClientes = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor de chat - Iván Martín Murcia");
        setMinimumSize(new java.awt.Dimension(851, 622));
        setPreferredSize(new java.awt.Dimension(851, 622));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblLog.setText("Log del servidor:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        getContentPane().add(lblLog, gridBagConstraints);

        btnDesconectar.setText("Desconectar");
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 10, 20);
        getContentPane().add(btnDesconectar, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 654;
        gridBagConstraints.ipady = 265;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 10);
        getContentPane().add(sPnlContendor, gridBagConstraints);

        sPnlClientes.setViewportView(jListClientes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 20);
        getContentPane().add(sPnlClientes, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ejecuta el método de desconexión del servidor y desactiva el botón.
     *
     * @param evt evento de click del botón Desconectar
     */
    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarActionPerformed
        socketServidor.cerrarRecursos();
        System.exit(0);
    }//GEN-LAST:event_btnDesconectarActionPerformed

    /**
     * Actualiza la lista de clientes conectados al chat en la JList de la
     * interfaz. Es un método sincronizado ya que son los hilos los que lo
     * ejecutan al dar acceso al chat a un cliente o desconectarlo.
     */
    public static synchronized void actualizarListaClientes() {
        modeloListaClientes.clear();
        for (HiloGestionClientes cliente : Servidor.getClientes()) {
            if (!cliente.getBloqueado()) {
                modeloListaClientes.addElement(cliente.getNick());
            }
        }
        jListClientes.setModel(modeloListaClientes);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainServidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDesconectar;
    private static javax.swing.JList<String> jListClientes;
    private javax.swing.JLabel lblLog;
    private javax.swing.JScrollPane sPnlClientes;
    private javax.swing.JScrollPane sPnlContendor;
    // End of variables declaration//GEN-END:variables
}
