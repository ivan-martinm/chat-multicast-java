package cliente;

import javax.swing.JOptionPane;

/**
 * Clase principal para el Cliente. Al ejecutarse inciará una instancia de la
 * clase Cliente para no bloquear la interfaz gráfica.
 *
 * Se puede ejecutar está clase tantas veces como clientes se quiera conectar
 * al chat.
 *
 * @author Ivan Martin
 */
public class MainCliente extends javax.swing.JFrame {

    private Cliente hiloCliente;

    /**
     * Creates new form MainCliente
     */
    public MainCliente() {
        initComponents();
        hiloCliente = new Cliente();
        sPnlContenedor.setViewportView(hiloCliente);
        hiloCliente.start();
    }

    /**
     * Activa y desactiva los componentes de la interfaz en función del estado
     * de acceso al chat.
     *
     * @param acceso valor booleano que controla el activado y desactivado de
     * componentes.
     */
    public static void concederAcceso(boolean acceso) {
        txtNick.setEnabled(!acceso);
        btnAcceso.setEnabled(!acceso);
        txtMensaje.setEnabled(acceso);
        btnEnviar.setEnabled(acceso);
        btnDesconectar.setEnabled(acceso);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlNorte = new javax.swing.JPanel();
        lblNick = new javax.swing.JLabel();
        txtNick = new javax.swing.JTextField();
        btnAcceso = new javax.swing.JButton();
        btnDesconectar = new javax.swing.JButton();
        pnlVacio = new javax.swing.JPanel();
        pnlCentro = new javax.swing.JPanel();
        sPnlContenedor = new javax.swing.JScrollPane();
        pnlSur = new javax.swing.JPanel();
        txtMensaje = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cliente de chat");
        setMinimumSize(new java.awt.Dimension(755, 410));
        setPreferredSize(new java.awt.Dimension(755, 410));

        pnlNorte.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 10, 20));
        java.awt.GridBagLayout pnlNorteLayout = new java.awt.GridBagLayout();
        pnlNorteLayout.columnWeights = new double[] {0.0};
        pnlNorte.setLayout(pnlNorteLayout);

        lblNick.setText("NICK:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlNorte.add(lblNick, gridBagConstraints);

        txtNick.setMinimumSize(new java.awt.Dimension(150, 27));
        txtNick.setPreferredSize(new java.awt.Dimension(150, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlNorte.add(txtNick, gridBagConstraints);

        btnAcceso.setText("Acceso Chat");
        btnAcceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccesoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlNorte.add(btnAcceso, gridBagConstraints);

        btnDesconectar.setText("Desconectar");
        btnDesconectar.setEnabled(false);
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlNorte.add(btnDesconectar, gridBagConstraints);

        javax.swing.GroupLayout pnlVacioLayout = new javax.swing.GroupLayout(pnlVacio);
        pnlVacio.setLayout(pnlVacioLayout);
        pnlVacioLayout.setHorizontalGroup(
            pnlVacioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlVacioLayout.setVerticalGroup(
            pnlVacioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlNorte.add(pnlVacio, gridBagConstraints);

        getContentPane().add(pnlNorte, java.awt.BorderLayout.PAGE_START);

        pnlCentro.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20));
        pnlCentro.setLayout(new java.awt.BorderLayout());

        sPnlContenedor.setViewportView(null);
        pnlCentro.add(sPnlContenedor, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlCentro, java.awt.BorderLayout.CENTER);

        pnlSur.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 20, 20));
        pnlSur.setLayout(new java.awt.GridBagLayout());

        txtMensaje.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlSur.add(txtMensaje, gridBagConstraints);

        btnEnviar.setText("Enviar");
        btnEnviar.setEnabled(false);
        btnEnviar.setPreferredSize(new java.awt.Dimension(75, 27));
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlSur.add(btnEnviar, gridBagConstraints);

        getContentPane().add(pnlSur, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Controla el comportamiento del botón Acceso Chat. Si no hay conexión
     * con el servidor muestra una ventana de error. Si se intenta enviar un
     * nick en blanco muestra una ventana de error, de lo contrario ejecuta
     * el método enviarMensajeAlServidor() con el nick introducido.
     *
     * @param evt evento de click del botón Acceso Chat
     */
    private void btnAccesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccesoActionPerformed
        if (!hiloCliente.hayConexion()) {
            JOptionPane.showMessageDialog(this, "No hay conexión con el servidor", "Error de conexion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (txtNick.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "Debes identificarte con un nick", "Nick vacío", JOptionPane.ERROR_MESSAGE);
            return;
        }
        hiloCliente.enviarMensajeAlServidor(txtNick.getText());
    }//GEN-LAST:event_btnAccesoActionPerformed

    /**
     * Controla el comportamiento del botón Enviar. Ejecuta el método
     * enviarMensajeAlServidor() de la clase Cliente, enviando el contenido del
     * JTextField txtMensaje. Si el contenido está vacío, mostrará un mensaje de
     * error.
     *
     * @param evt evento de click del botón Enviar
     */
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        String mensaje = txtMensaje.getText();
        if (mensaje.isBlank()) {
            JOptionPane.showMessageDialog(this, "Debes enviar un mensaje", "Mensaje vacío", JOptionPane.ERROR_MESSAGE);
            return;
        }
        hiloCliente.enviarMensajeAlServidor(mensaje);
        txtMensaje.setText("");
    }//GEN-LAST:event_btnEnviarActionPerformed

    /**
     * Controla el comportamiento del botón Desconectar. Ejecuta el método
     * enviarMensajeAlServidor() de la clase Cliente, enviando como mensaje
     * "!salir" para solicitar la desconexión.
     *
     * @param evt evento de click del botón Desconectar
     */
    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarActionPerformed
        hiloCliente.enviarMensajeAlServidor("!salir");
    }//GEN-LAST:event_btnDesconectarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnAcceso;
    private static javax.swing.JButton btnDesconectar;
    private static javax.swing.JButton btnEnviar;
    private javax.swing.JLabel lblNick;
    private javax.swing.JPanel pnlCentro;
    private javax.swing.JPanel pnlNorte;
    private javax.swing.JPanel pnlSur;
    private javax.swing.JPanel pnlVacio;
    private javax.swing.JScrollPane sPnlContenedor;
    private static javax.swing.JTextField txtMensaje;
    private static javax.swing.JTextField txtNick;
    // End of variables declaration//GEN-END:variables
}
